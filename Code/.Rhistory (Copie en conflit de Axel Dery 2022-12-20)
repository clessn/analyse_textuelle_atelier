enjeu = fct_reorder(enjeu, prop)) #%>%
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental + ) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, labour, immigration, macroeconomics, crime, social_welfare, culture) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, labour, immigration, macroeconomics, crime, social_welfare, culture) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, labour, immigration, macroeconomics, crime, social_welfare, culture) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
top_n(prop, 6) # keep les 6 enjeux les plus mentionnés
View(dataForAnal1)
top_n(6) # keep les 6 enjeux les plus mentionnés
# graphique
ggplot(dataMerged, aes(x=enjeu, y=prop)) +
geom_bar(stat="identity", show.legend = F, color="black", fill="blue", size=1.5, width = 0.75) +
geom_text(aes(label=as.character(prop)), color="black", size=10, position=position_dodge(width=0.1), vjust=0.8, hjust=-0.3) +
coord_flip() +
expand_limits(y=0:100) +
theme_classic(base_size = 25) +
ggtitle("\nEnjeux associés aux réfugiés Ukrainiens") +
#scale_x_discrete(labels=c("labour" = "Emploi", "macroeconomics" = "Économie", "immigration" = "Immigration",
#"social_welfare" = "Sécurité sociale","crime" = "Criminalité", "culture" = "Culture")) +
theme(panel.grid = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text = element_text(size = 50),
panel.background = element_rect(fill="transparent"),
legend.position="top",
legend.title = element_blank(),
axis.text.x = element_text(size = 30, colour = "black"),
axis.text.y = element_text(size = 30, colour = "black"),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=30, colour = "black",face = "bold"),
plot.caption = element_text(hjust = 0, size = 37, colour = "black"),
legend.text = element_text(size = 35, colour = "black"),
legend.key.width = unit(2,"line"))
# graphique
ggplot(dataForAnal1, aes(x=enjeu, y=prop)) +
geom_bar(stat="identity", show.legend = F, color="black", fill="blue", size=1.5, width = 0.75) +
geom_text(aes(label=as.character(prop)), color="black", size=10, position=position_dodge(width=0.1), vjust=0.8, hjust=-0.3) +
coord_flip() +
expand_limits(y=0:100) +
theme_classic(base_size = 25) +
ggtitle("\nEnjeux associés aux réfugiés Ukrainiens") +
#scale_x_discrete(labels=c("labour" = "Emploi", "macroeconomics" = "Économie", "immigration" = "Immigration",
#"social_welfare" = "Sécurité sociale","crime" = "Criminalité", "culture" = "Culture")) +
theme(panel.grid = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text = element_text(size = 50),
panel.background = element_rect(fill="transparent"),
legend.position="top",
legend.title = element_blank(),
axis.text.x = element_text(size = 30, colour = "black"),
axis.text.y = element_text(size = 30, colour = "black"),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=30, colour = "black",face = "bold"),
plot.caption = element_text(hjust = 0, size = 37, colour = "black"),
legend.text = element_text(size = 35, colour = "black"),
legend.key.width = unit(2,"line"))
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate("other" = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, labour, immigration, macroeconomics, crime, social_welfare, culture) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate("other" = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, labour, immigration, macroeconomics, crime, social_welfare, culture) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) %>%
top_n(prop, 6) # keep les 6 enjeux les plus mentionnés
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate("other" = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, labour, immigration, macroeconomics, crime, social_welfare, culture) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) %>%
top_n(prop, 5) # keep les 5 enjeux les plus mentionnés
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, labour, immigration, macroeconomics, crime, social_welfare, culture) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) %>%
top_n(prop, 5) # keep les 5 enjeux les plus mentionnés
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
#mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
#forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) %>%
top_n(prop, 5) # keep les 5 enjeux les plus mentionnés
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) %>%
top_n(prop, 5) # keep les 5 enjeux les plus mentionnés
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare, other) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
#mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
#  intl_affairs, labour, macroeconomics, religion, social_welfare, other) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
#mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
# forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
#select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
#  intl_affairs, labour, macroeconomics, religion, social_welfare, other) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
View(dataForAnal1)
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare, other) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare, other) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) %>%
top_n(prop, 5) # keep les 5 enjeux les plus mentionnés
View(dataForAnal1)
# graphique
ggplot(dataForAnal1, aes(x=enjeu, y=prop)) +
geom_bar(stat="identity", show.legend = F, color="black", fill="blue", size=1.5, width = 0.75) +
geom_text(aes(label=as.character(prop)), color="black", size=10, position=position_dodge(width=0.1), vjust=0.8, hjust=-0.3) +
coord_flip() +
expand_limits(y=0:100) +
theme_classic(base_size = 25) +
ggtitle("\nEnjeux associés aux réfugiés Ukrainiens") +
scale_x_discrete(labels=c("civil_rights" = "Droit civil", "crime" = "Criminalité", "culture" = "Culture",
"defence" = "Défense", "education" = "Éducation", "finance" = "Finance",
"government_ops" = "Opération gouvernementale", "healthcare" = "Santé", "housing" = "Logement",
"immigration" = "Immigration", "intl_affairs" = "Affaires internationales", "labour" = "Emploi",
"macroeconomics" = "Économie", "religion" = "Religion", "social_welfare" = "Sécurité sociale",
"other" = "Autre")) +
theme(panel.grid = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text = element_text(size = 50),
panel.background = element_rect(fill="transparent"),
legend.position="top",
legend.title = element_blank(),
axis.text.x = element_text(size = 30, colour = "black"),
axis.text.y = element_text(size = 30, colour = "black"),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=30, colour = "black",face = "bold"),
plot.caption = element_text(hjust = 0, size = 37, colour = "black"),
legend.text = element_text(size = 35, colour = "black"),
legend.key.width = unit(2,"line"))
dataForAnal1 <- runDictionary(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare, other) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) %>%
top_n(prop, 5) # keep les 5 enjeux les plus mentionnés
# graphique 1 Syrie
ggplot(dataForAnal1, aes(x=enjeu, y=prop)) +
geom_bar(stat="identity", show.legend = F, color="black", fill="blue", size=1.5, width = 0.75) +
geom_text(aes(label=as.character(prop)), color="black", size=10, position=position_dodge(width=0.1), vjust=0.8, hjust=-0.3) +
coord_flip() +
expand_limits(y=0:100) +
theme_classic(base_size = 25) +
ggtitle("\nEnjeux associés aux réfugiés Syriens") +
scale_x_discrete(labels=c("civil_rights" = "Droit civil", "crime" = "Criminalité", "culture" = "Culture",
"defence" = "Défense", "education" = "Éducation", "finance" = "Finance",
"government_ops" = "Opération gouvernementale", "healthcare" = "Santé", "housing" = "Logement",
"immigration" = "Immigration", "intl_affairs" = "Affaires internationales", "labour" = "Emploi",
"macroeconomics" = "Économie", "religion" = "Religion", "social_welfare" = "Sécurité sociale",
"other" = "Autre")) +
theme(panel.grid = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text = element_text(size = 50),
panel.background = element_rect(fill="transparent"),
legend.position="top",
legend.title = element_blank(),
axis.text.x = element_text(size = 30, colour = "black"),
axis.text.y = element_text(size = 30, colour = "black"),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=30, colour = "black",face = "bold"),
plot.caption = element_text(hjust = 0, size = 37, colour = "black"),
legend.text = element_text(size = 35, colour = "black"),
legend.key.width = unit(2,"line"))
dataForAnal2 <- runDictionary(dataA = data2, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare, other) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) #%>%
# graphique 2 Ukraine
ggplot(dataForAnal2, aes(x=enjeu, y=prop)) +
geom_bar(stat="identity", show.legend = F, color="black", fill="blue", size=1.5, width = 0.75) +
geom_text(aes(label=as.character(prop)), color="black", size=10, position=position_dodge(width=0.1), vjust=0.8, hjust=-0.3) +
coord_flip() +
expand_limits(y=0:100) +
theme_classic(base_size = 25) +
ggtitle("\nEnjeux associés aux réfugiés Ukrainiens") +
scale_x_discrete(labels=c("labour" = "Emploi", "macroeconomics" = "Économie", "immigration" = "Immigration",
"social_welfare" = "Sécurité sociale","crime" = "Criminalité", "culture" = "Culture"))+
theme(panel.grid = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text = element_text(size = 50),
panel.background = element_rect(fill="transparent"),
legend.position="top",
legend.title = element_blank(),
axis.text.x = element_text(size = 30, colour = "black"),
axis.text.y = element_text(size = 30, colour = "black"),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=30, colour = "black",face = "bold"),
plot.caption = element_text(hjust = 0, size = 37, colour = "black"),
legend.text = element_text(size = 35, colour = "black"),
legend.key.width = unit(2,"line"))
# graphique 2 Ukraine
ggplot(dataForAnal2, aes(x=enjeu, y=prop)) +
geom_bar(stat="identity", show.legend = F, color="black", fill="blue", size=1.5, width = 0.75) +
geom_text(aes(label=as.character(prop)), color="black", size=10, position=position_dodge(width=0.1), vjust=0.8, hjust=-0.3) +
coord_flip() +
expand_limits(y=0:100) +
theme_classic(base_size = 25) +
ggtitle("\nEnjeux associés aux réfugiés Ukrainiens") +
scale_x_discrete(labels=c("civil_rights" = "Droit civil", "crime" = "Criminalité", "culture" = "Culture",
"defence" = "Défense", "education" = "Éducation", "finance" = "Finance",
"government_ops" = "Opération gouvernementale", "healthcare" = "Santé", "housing" = "Logement",
"immigration" = "Immigration", "intl_affairs" = "Affaires internationales", "labour" = "Emploi",
"macroeconomics" = "Économie", "religion" = "Religion", "social_welfare" = "Sécurité sociale",
"other" = "Autre")) +
theme(panel.grid = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text = element_text(size = 50),
panel.background = element_rect(fill="transparent"),
legend.position="top",
legend.title = element_blank(),
axis.text.x = element_text(size = 30, colour = "black"),
axis.text.y = element_text(size = 30, colour = "black"),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=30, colour = "black",face = "bold"),
plot.caption = element_text(hjust = 0, size = 37, colour = "black"),
legend.text = element_text(size = 35, colour = "black"),
legend.key.width = unit(2,"line"))
data <- read_rds("../Data/dataset.rds")
data <- read_rds("../Data/dataset.rds")
# DF avec juste les articles syrie
data1 <- data %>%
filter(country == "Syrie")
# DF avec juste les article Ukraine
data2 <- data %>%
filter(country == "Ukraine")
# get dictionnaire hublot : celui ci est le dictionnaire issues
credentials <- hublot::get_credentials(
Sys.getenv("HUB3_URL"),
Sys.getenv("HUB3_USERNAME"),
Sys.getenv("HUB3_PASSWORD"))
# Loader le dictionnaire
issues_dict <- clessnverse::get_dictionary('issues', c("en","fr"), credentials) # changer le dictionnaire ici -> subcategories ou issues
# Pour rouler les dictionnaires pour analyses textuelles (fonction en construction)
runDictionary1 <- function(dataA, word, dictionaryA) {
tictoc::tic()
dataA <- dataA %>% mutate(word = {{word}})
corpusA <- tokens(dataA$word)
dfmA    <- dfm(tokens_lookup(corpusA, dictionaryA, nested_scope = "dictionary"))
message(green("100% expressions/words found"))
tictoc::toc()
dataB   <- convert(dfmA, to = "data.frame")
return(dataB)
}
runDictionary2 <- function(dataA, word, dictionaryA) {
tictoc::tic()
dataA <- dataA %>% mutate(word = {{word}})
corpusA <- tokens(dataA$word)
dfmA    <- dfm(tokens_lookup(corpusA, dictionaryA, nested_scope = "dictionary"))
message(green("100% expressions/words found"))
tictoc::toc()
dataB   <- convert(dfmA, to = "data.frame")
return(dataB)
}
dataForAnal1 <- runDictionary1(dataA = data1, word = text, issues_dict) %>%
mutate(other = aboriginal + agriculture + constitutional_natl_unity + energy + environment + fisheries + foreign_trade +
forestry + intergovernmental) %>% # merge les colonnes qui nous intéresse moins
select(doc_id, civil_rights, crime, culture, defence, education, finance, government_ops, healthcare, housing, immigration,
intl_affairs, labour, macroeconomics, religion, social_welfare, other) %>%  # garder les colonnes qui nous interesse
pivot_longer(!doc_id, names_to = "enjeu", values_to = "n") %>%
# select(-doc_id) %>%
mutate(mention = ifelse(n > 0, yes = 1, no = 0)) %>%
group_by(enjeu) %>%
summarise(n=sum(mention)) %>%
mutate(prop  = round(n/sum(n),4)*100,
enjeu = fct_reorder(enjeu, prop)) %>%
top_n(prop, 5) # keep les 5 enjeux les plus mentionnés
# graphique 1 Syrie
ggplot(dataForAnal1, aes(x=enjeu, y=prop)) +
geom_bar(stat="identity", show.legend = F, color="black", fill="blue", size=1.5, width = 0.75) +
geom_text(aes(label=as.character(prop)), color="black", size=10, position=position_dodge(width=0.1), vjust=0.8, hjust=-0.3) +
coord_flip() +
expand_limits(y=0:100) +
theme_classic(base_size = 25) +
ggtitle("\nEnjeux associés aux réfugiés Syriens") +
scale_x_discrete(labels=c("civil_rights" = "Droit civil", "crime" = "Criminalité", "culture" = "Culture",
"defence" = "Défense", "education" = "Éducation", "finance" = "Finance",
"government_ops" = "Opération gouvernementale", "healthcare" = "Santé", "housing" = "Logement",
"immigration" = "Immigration", "intl_affairs" = "Affaires internationales", "labour" = "Emploi",
"macroeconomics" = "Économie", "religion" = "Religion", "social_welfare" = "Sécurité sociale",
"other" = "Autre")) +
theme(panel.grid = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text = element_text(size = 50),
panel.background = element_rect(fill="transparent"),
legend.position="top",
legend.title = element_blank(),
axis.text.x = element_text(size = 30, colour = "black"),
axis.text.y = element_text(size = 30, colour = "black"),
axis.title = element_blank(),
plot.title = element_text(hjust = 0.5, size=30, colour = "black",face = "bold"),
plot.caption = element_text(hjust = 0, size = 37, colour = "black"),
legend.text = element_text(size = 35, colour = "black"),
legend.key.width = unit(2,"line"))
data <- read_rtf("../Data/raw_syrie/CA-Globe&Mail-Syrie/CA-Globe&Mail-Syrie-1.rtf") #16h56
library(striprtf)
library(tidyverse)
data <- read_rtf("../Data/raw_syrie/CA-Globe&Mail-Syrie/CA-Globe&Mail-Syrie-1.rtf") #16h56
name <- "CA-Globe&Mail-Syrie-1"
df_data <- as.data.frame(data) %>%
slice(-1)
df_data2 <- df_data %>%
mutate(variable =
ifelse(data %in% c(grep("janvier [1-9]", data, value=T),
grep("février [1-9]", data, value=T),
grep("mars [1-9]", data, value=T),
grep("avril [1-9]", data, value=T),
grep("mai [1-9]", data, value=T),
grep("juin [1-9]", data, value=T),
grep("juillet [1-9]", data, value=T),
grep("août [1-9]", data, value=T),
grep("septembre [1-9]", data, value=T),
grep("octobre [1-9]", data, value=T),
grep("novembre [1-9]", data, value=T),
grep("décembre [1-9]", data, value=T)), "date",
ifelse(grepl("mots", data), "words",
ifelse(grepl("Document [A-Z]+", data), "doc_id",
"text"))),
id =
ifelse(variable == "doc_id", 1, 0)) %>%
filter(!data %in% c("GLOB", "Special to The Globe and Mail", "Anglais"))
increments <- which(df_data2$id == 1)
real_ending <- max(increments)
df_data2 <- head(df_data2, real_ending)
vector <- c()
for (i in 1:length(increments)){
ix <- increments[i]
times <- ix - length(vector)
vectori <- rep(i, times)
vector <- c(vector, vectori)
print(i)
}
df_data2$article_id <- vector
library(chron)
Sys.setlocale("LC_TIME", "fr_FR")
df_data3 <- df_data2 %>%
select(-id) %>%
filter(data != "") %>%
pivot_wider(names_from = variable, values_from = data,
id_cols = "article_id", values_fn = list) %>%
mutate(source = "The Globe and Mail") %>%
select(doc_id, text, date) %>%
rowwise() %>%
mutate(doc_id = gsub("Document", "", doc_id),
date = as.Date(date, "%d %B %Y"))
texts <- c()
for(i in 1:nrow(df_data3)){
texts[i] <- paste0(eval(parse(text = df_data3$text[i])), collapse = " ")
print(i)
}
df_data3$text <- texts
View(df_data3)
